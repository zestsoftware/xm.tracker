Time Tracker functional tests
=============================

This document explains how the user interface of the time tracker is used.

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> portal_url = self.portal.absolute_url()

The following is useful when writing and debugging testbrowser tests. It lets
us see all error messages in the error_log.

    >>> browser.handleErrors = False
    >>> self.portal.error_log._ignored_exceptions = ()

With that in place, we can go to the portal front page and log in. We will
do this using the portal owner from PloneTestCase:

    >>> from Products.PloneTestCase.setup import portal_owner, default_password
    >>> browser.open(portal_url)

We have the login portlet, so let's use that and check that we are
really logged in.

    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()
    >>> browser.url == portal_url
    True
    >>> "You are now logged in" in browser.contents
    True

Now we go to the tracker view.

    >>> browser.open(portal_url + '/@@tracker')
    >>> "Time Tracker" in browser.contents
    True
    >>> "Start working" in browser.contents
    True
    >>> "00:00:00" in browser.contents
    True

We start the timer.

    >>> browser.getControl(name='start').click()
    >>> "Started the timer" in browser.contents
    True
    >>> "Stop and reset" in browser.contents
    True

After reloading the page the time should not be zero seconds anymore.
We will wait one second before reloading.

    >>> import time
    >>> time.sleep(1)
    >>> browser.reload()
    >>> "00:00:00" in browser.contents
    False

During development we provide a button to create demo content.

    >>> browser.getControl(name='demo').click()
    >>> "Task 1" in browser.contents
    True

We can now type a description for one of the tasks and click the track button

    >>> browser.getControl(name='text', index=2).value = 'Wrote my functional test'
    >>> browser.getControl(name='track', index=2).click()
    >>> "Added entry" in browser.contents
    True
    >>> "Wrote my functional test" in browser.contents
    True
