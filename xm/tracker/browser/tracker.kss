
/* when 3.0 support will be dropped, the new way to provide form vars will
     be one line, like this:

       action-server: kss_track_time currentForm();
*/

.track-time:click {
    action-server: kss_track_time;
    kss_track_time-kssSubmitForm: currentForm();
    evt-click-preventdefault: true;
}

.track-time:timer-reset(mytimer){
}

/* Edit entries (time and text) */

.edit-entries-button:click{
    action-server: kss_edit_entries;
    kss_edit_entries-kssSubmitForm: currentForm();
    evt-click-preventdefault: true;
}

#select-tasks:click {
    action-server: kss_select_tasks;
    evt-click-preventdefault: true;
}

.entry_text_time_edit:keypress,
.entry_text_time_edit:keydown {
    evt-keypress-preventdefault: true;
    evt-keypress-keycodes: 13;
    evt-keydown-preventdefault: true;
    evt-keydown-keycodes: 13;
}

.entry_text_time_edit:keyup {
    evt-keyup-preventdefault: true;
    evt-keyup-keycodes: 13;
    action-server: kss_edit_entries;
    kss_edit_entries-kssSubmitForm: currentForm();
}

/* Client side timer */

#start-timer:timer-start(mytimer) {
    evt-timer-start-displayformat_nohours: '%0M:%0S';
    evt-timer-start-displayformat_hours: '%h:%0M:%0S';
    evt-timer-start-preventdefault: true;
    action-server: kss_start_timer;
    action-client: removeAttribute;
    removeAttribute-kssSelector: css('.track_form input.track-time');
    removeAttribute-name: disabled;
}

#stop-timer:timer-stop(mytimer) {
    action-server: kss_stop_timer;
    evt-timer-stop-preventdefault: true;
    action-client: setAttribute;
    setAttribute-kssSelector: css('.track_form input.track-time');
    setAttribute-name: disabled;
    setAttribute-value: disabled;
}

#timer:timer-update(mytimer) {
    action-client: log;
    log-message: pass(seconds);
}

/* Collapse and expand task details */

.task-title:click {
    action-client: toggleClass;
    toggleClass-kssSelector: htmlid(kssAttr(tasktitle));
    toggleClass-value: hidden;
}
